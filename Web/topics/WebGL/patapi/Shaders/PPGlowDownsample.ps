////////////////////////////////////////////////////////////////
//
#define saturate( a )	clamp( a, 0.0, 1.0 )
#define lerp( a, b, t )	mix( a, b, t )

precision highp float;

////////////////////////////////////////////////////////////////
// CONSTANTS
//
const float	PI = 3.1415926535897932384626433832795;


////////////////////////////////////////////////////////////////
varying vec3		_Position;
varying vec2		_UV;

uniform float		_SourceAttenuation;

uniform vec3		_dUV;
uniform sampler2D	_TexSourceBuffer;

vec3	DecodeHDR( vec2 _UV )
{
	vec4	V = texture2D( _TexSourceBuffer, _UV );
	float	MaxComponent = exp( 2.0 * V.a ) - 1.0;	// Uncompress luminance
	return V.xyz * (1e-3 + MaxComponent);
}

vec4	EncodeHDR( vec3 _Color )
{
	// Encode maximum luminance in alpha
	float	MaxComponent = max( 1.0, max( max( _Color.x, _Color.y ), _Color.z ) );
	float	LogRange = saturate( log( 1.0 + MaxComponent ) / 2.0 );	// Compress a [0,20] luminance range into [0,1]
	_Color /= 1e-3 + MaxComponent;	// Normalize...

	return vec4( _Color, LogRange );
}

void	main()
{
	vec2	UV = _UV;

	UV -= _dUV.xy;
	vec3	V00 = DecodeHDR( UV );	UV += _dUV.xz;
	vec3	V01 = DecodeHDR( UV );	UV += _dUV.xz;
	vec3	V02 = DecodeHDR( UV );	UV += _dUV.zy;
	vec3	V12 = DecodeHDR( UV );	UV += _dUV.zy;
	vec3	V11 = DecodeHDR( UV );	UV -= _dUV.xz;
	vec3	V10 = DecodeHDR( UV );	UV -= _dUV.xz;
	vec3	V20 = DecodeHDR( UV );	UV += _dUV.xz;
	vec3	V21 = DecodeHDR( UV );	UV += _dUV.xz;
	vec3	V22 = DecodeHDR( UV );

	vec3	Value = ( 0.125 * (V00 + V02 + V20 + V22) +
					  0.500 * (V01 + V10 + V12 + V21) +
					  1.000 * V11) / 3.5;

			Value *= _SourceAttenuation;

	gl_FragColor = EncodeHDR( Value );
}