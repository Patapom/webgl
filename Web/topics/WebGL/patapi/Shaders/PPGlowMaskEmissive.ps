////////////////////////////////////////////////////////////////
// Masks the emissive sources
//
#define saturate( a )	clamp( a, 0.0, 1.0 )
#define lerp( a, b, t )	mix( a, b, t )

precision highp float;

////////////////////////////////////////////////////////////////
varying vec2		_UV;

uniform sampler2D	_TexSourceBuffer;
uniform sampler2D	_TexEmissiveMask;

vec3	DecodeHDR( vec2 _UV )
{
	vec4	V = texture2D( _TexSourceBuffer, _UV );
	float	MaxComponent = exp( 3.0 * V.a ) - 1.0;	// Uncompress luminance
	return V.xyz * (1e-3 + MaxComponent);
}

vec4	EncodeHDR( vec3 _Color )
{
	// Encode maximum luminance in alpha
	float	MaxComponent = max( 1.0, max( max( _Color.x, _Color.y ), _Color.z ) );
	float	LogRange = saturate( log( 1.0 + MaxComponent ) / 2.0 );	// Compress a [0,20] luminance range into [0,1]
	_Color /= 1e-3 + MaxComponent;	// Normalize...

	return vec4( _Color, LogRange );
}

void	main()
{
	vec3	Color = DecodeHDR( _UV );
	float	Mask = texture2D( _TexEmissiveMask, _UV ).x;
	gl_FragColor = EncodeHDR( Mask * Color );
}